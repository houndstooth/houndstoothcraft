import {
	appState,
	createOverrideNodes,
	OverrideParentNode,
	toggleOverrideParentOpen,
} from '../../../../../../src/indexForTest'
import { createMockElement, createMockEvent } from '../../../../helpers'

describe('toggle override parent open', () => {
	it('toggles whether it is marked as open on the state', () => {
		createOverrideNodes.default()
		const subject: (_: Event) => void = toggleOverrideParentOpen.default
		const layersPattern: OverrideParentNode = appState.controls.overrideNodes.children.layersPattern as OverrideParentNode
		const colorSettings: OverrideParentNode = layersPattern.children.colorSettings as OverrideParentNode
		// tslint:disable-next-line:max-line-length
		const colorAssignmentSettings: OverrideParentNode = colorSettings.children.colorAssignmentSettings as OverrideParentNode

		// @ts-ignore
		const openingEvent: Event = createMockEvent({
			target: createMockElement({
				id: 'layersPattern-colorSettings-colorAssignmentSettings',
				parentNodeOpen: false,
			}) as HTMLInputElement,
		})
		subject(openingEvent)

		expect(colorAssignmentSettings.open).toBe(true)

		// @ts-ignore
		const closingEvent: Event = createMockEvent({
			target: createMockElement({
				id: 'layersPattern-colorSettings-colorAssignmentSettings',
				parentNodeOpen: true,
			}) as HTMLInputElement,
		})
		subject(closingEvent)

		expect(colorAssignmentSettings.open).toBe(false)
	})
})
