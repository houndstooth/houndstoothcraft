// tslint:disable:max-file-line-count

export {
	clearContext,
	clearContexts,
	clearMixedDownContext,
	DataBlob,
	exportCanvas,
	saveCanvas,
	getCurrentContext,
	mixDownContexts,
} from './canvas'
export {
	frameInputChangeHandler,
	pauseClickHandler,
	playClickHandler,
	rewindClickHandler,
	snapshotClickHandler,
	buildEffectToggleClickHandler,
	updateCurrentFrame,
	enableOrDisableAnimationControls,
	enableOrDisableOtherEffectToggles,
	updateDescriptions,
} from './controls'
export {
	addDescription,
	attachControlHandlers,
	Canvas,
	Context,
	createCheckbox,
	createContext,
	createEffectToggles,
	Dimensions,
	InputElement,
	PageElement,
	Px,
	saveBlob,
	scaleCanvasContainer,
	scaleElement,
	createContexts,
	createEffectToggle,
	createLabel,
	LabelElement,
	insertElementRightAfter,
	makeId,
	storeDomElements,
	documentWrapper,
	consoleWrapper,
	windowWrapper,
	storeMixedDownContext,
	InsertElementRightAfter,
} from './dom'
export {
	callFunctionsPerSetting,
	clearInterval,
	executeSelectedEffects,
	cancelPreviousPattern,
	animator,
	executeAnimation,
	buildAnimationIntervalFunction,
	buildAnimationFunction,
	previousFrameHasFinished,
	executeGridAndMaybeLogging,
	executeGrid,
	gridComplete,
	gridProgressIntervalFunction,
	executeLayer,
	completeLayers,
	thisPatternHasNotBeenCanceled,
	asyncMaybeTile,
	updateProgress,
	executePattern,
	ConditionFunction,
	ExecuteLayerParams,
	AnimationParams,
	ExecuteParams,
	setTileCount,
	standardAnimation,
	incrementTilesCompleted,
} from './execute'
export {
	fill,
	Path,
	Pixel,
	resetClip,
	setClip,
	buildFill,
	buildPath,
	clipPath,
	fillPath,
} from './render'
export {
	Overwrite,
	resetMainHoundstooth,
	SettingsPath,
	SettingsStep,
	deeperPath,
	getPatternSettingOrCreatePath,
	shouldRecurse,
	SettingNamesToPathsMap,
	buildSettingNamesToPathsMap,
	BuildSettingNamesToPathsMapParams,
	CheckSettingForConflict,
	PatternsHaveConflictsParams,
	FunctionsOf,
	SettingsFunction,
	SettingsFunctionObject,
	checkSettingForConflict,
	patternsHaveConflicts,
	combineEffects,
	composePatterns,
	settingPath,
	composeMainHoundstooth,
	effectsHaveConflicts,
	prepareFunctionObjectsPerSetting,
	ComposeMainHoundstoothParams,
	ComposePatternsParams,
	FullSettingsPath,
	PrepareFunctionObjectsParams,
	getSettingsPath,
	initializeCurrentPatternFromBasePattern,
} from './settings'
export { appState } from './appState'
export {
	CanvasState,
	ControlsState,
	DomState,
	ExecuteState,
	SettingsState,
	AppState,
} from './types'
