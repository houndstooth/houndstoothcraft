import {
	appState,
	createOverrideNodes,
	OverrideParentNode,
	toggleOverrideParentOpen,
} from '../../../../../../src/indexForTest'

describe('toggle override parent open', () => {
	it('toggles whether it is marked as open on the state', () => {
		createOverrideNodes.default()
		const subject: (_: Event) => void = toggleOverrideParentOpen.default
		const layersPattern: OverrideParentNode = appState.controls.overrideNodes.children.layersPattern as OverrideParentNode
		const colorSettings: OverrideParentNode = layersPattern.children.colorSettings as OverrideParentNode
		// tslint:disable-next-line:max-line-length
		const colorAssignmentSettings: OverrideParentNode = colorSettings.children.colorAssignmentSettings as OverrideParentNode

		// tslint:disable-next-line:no-any
		const openingEvent: any = {
			target: {
				id: 'layersPattern-colorSettings-colorAssignmentSettings',
				parentNode: { open: false },
			},
		}
		// tslint:disable-next-line:no-unsafe-any
		subject(openingEvent)

		expect(colorAssignmentSettings.open).toBe(true)

		// tslint:disable-next-line:no-any
		const closingEvent: any = {
			target: {
				id: 'layersPattern-colorSettings-colorAssignmentSettings',
				parentNode: { open: true },
			},
		}
		// tslint:disable-next-line:no-unsafe-any
		subject(closingEvent)

		expect(colorAssignmentSettings.open).toBe(false)
	})
})
